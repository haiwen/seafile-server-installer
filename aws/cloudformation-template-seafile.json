{
    "Metadata": {
        "README": {
            "Fn::Join": [
                "\n",
                [
                    "",
                    "",
                    "AWS Cloudformation Template for deploying Seafile Servers on AWS EC2,",
                    "based on the work of Seafile Ltd. : https://github.com/haiwen/seafile-server-installer",
                    "The latest version of this template can be found at : https://github.com/scottpedia/seafile-server-installer/aws",
                    "",
                    "Copyright (C) 2023 Scott X. L. <wtanglef@pm.me>",
                    "",
                    "This program is free software: you can redistribute it and/or modify it under the terms of the GNU Affero General Public License as published by the Free Software Foundation, either version 3 of the License, or (at your option) any later version.",
                    "",
                    "This program is distributed in the hope that it will be useful, but WITHOUT ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the GNU General Public License for more details.",
                    "",
                    "You should have received a copy of the GNU General Public License along with this program. If not, see <https://www.gnu.org/licenses/>.",
                    "",
                    ""
                ]
            ]
        }
    },
    "AWSTemplateFormatVersion": "2010-09-09",
    "Mappings": {
        "OS": {
            "Ubuntu2004": {
                "HelperInstallationCommands": "export DEBIAN_FRONTEND=noninteractive\napt-get -yq update\napt-get -yq install python3-pip zip awscli\npython3 -m pip install https://s3.amazonaws.com/cloudformation-examples/aws-cfn-bootstrap-py3-latest.tar.gz\n"
            }
        }
    },
        "Resources": {
            "IAMInstanceProfile": {
                "Type": "AWS::IAM::InstanceProfile",
                "Properties": {
                    "InstanceProfileName": {
                        "Ref": "KeyPair"
                    },
                    "Path": "/seafile-installer/",
                    "Roles": [
                        {
                            "Ref": "GeneralExecutionRole"
                        }
                    ]
                },
                "DependsOn": [
                    "GeneralExecutionRole",
                    "KeyPair"
                ]
            },
            "SeafileVPC": {
                "Type": "AWS::EC2::VPC",
                "Properties": {
                    "CidrBlock": "10.0.0.0/24"
                },
                "Metadata": {}
            },
            "SeafileSubnet": {
                "Type": "AWS::EC2::Subnet",
                "Properties": {
                    "VpcId": {
                        "Ref": "SeafileVPC"
                    },
                    "CidrBlock": "10.0.0.0/24",
                    "MapPublicIpOnLaunch": true,
                    "AvailabilityZone": {
                        "Fn::Select": [
                            "0",
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "SeafileVPC",
                    "SeafileInternetGateway"
                ]
            },
            "SeafileRouteTable": {
                "Type": "AWS::EC2::RouteTable",
                "Properties": {
                    "VpcId": {
                        "Ref": "SeafileVPC"
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "SeafileSubnet"
                ]
            },
            "PublicInternetRoute": {
                "Type": "AWS::EC2::Route",
                "Properties": {
                    "DestinationCidrBlock": "0.0.0.0/0",
                    "RouteTableId": {
                        "Ref": "SeafileRouteTable"
                    },
                    "GatewayId": {
                        "Ref": "SeafileInternetGateway"
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "SeafileRouteTable",
                    "SeafileInternetGateway",
                    "InternetGatewayAttachment"
                ]
            },
            "SeafileInstance": {
                "Type": "AWS::EC2::Instance",
                "CreationPolicy": {
                    "ResourceSignal": {
                        "Timeout": "PT15M"
                    }
                },
                "Properties": {
                    "IamInstanceProfile": {
                        "Ref": "IAMInstanceProfile"
                    },
                    "UserData": {
                        "Fn::Base64": {
                            "Fn::Join": [
                                "",
                                [
                                    "#!/bin/bash -xe\n",
                                    "trap 'cfn-signal -e 1 ",
                                    " --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " --resource SeafileInstance ",
                                    " --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "' ERR\n",
                                    "sleep 60\n",
                                    {
                                        "Fn::FindInMap": [
                                            "OS",
                                            {
                                                "Ref": "OS"
                                            },
                                            "HelperInstallationCommands"
                                        ]
                                    },
                                    "cd /root\n",
                                    "wget --no-check-certificate https://raw.githubusercontent.com/scottpedia/seafile-server-installer/master/seafile-",
                                    {
                                        "Ref": "SeafileVersion"
                                    },
                                    "_ubuntu\n",
                                    "chmod +x ./seafile-",
                                    {
                                        "Ref": "SeafileVersion"
                                    },
                                    "_ubuntu\n",
                                    "export SEAFILE_ADMIN_PW='",
                                    {
                                        "Ref": "SeafileAdminPassword"
                                    },
                                    "'; ",
                                    "export SEAFILE_PRO=0; ./seafile-",
                                    {
                                        "Ref": "SeafileVersion"
                                    },
                                    "_ubuntu ",
                                    {
                                        "Ref": "SeafileVersion"
                                    },
                                    ".0\n",
                                    "cfn-signal -e 0 ",
                                    " --stack ",
                                    {
                                        "Ref": "AWS::StackName"
                                    },
                                    " --resource SeafileInstance ",
                                    " --region ",
                                    {
                                        "Ref": "AWS::Region"
                                    },
                                    "\n"
                                ]
                            ]
                        }
                    },
                    "SecurityGroupIds": [
                        {
                            "Fn::GetAtt": [
                                "SeafileSecurityGroup",
                                "GroupId"
                            ]
                        }
                    ],
                    "SubnetId": {
                        "Ref": "SeafileSubnet"
                    },
                    "AvailabilityZone": {
                        "Fn::Select": [
                            "0",
                            {
                                "Fn::GetAZs": ""
                            }
                        ]
                    },
                    "InstanceType": {
                        "Ref": "InstanceType"
                    },
                    "KeyName": {
                        "Ref": "KeyPair"
                    },
                    "ImageId": {
                        "Fn::GetAtt": [
                            "AMIInfo",
                            "AMIId"
                        ]
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "SeafileRouteTable",
                    "KeyPair",
                    "AMIInfoFunction",
                    "SeafileSecurityGroup",
                    "IAMInstanceProfile"
                ]
            },
            "KeyPair": {
                "Type": "AWS::EC2::KeyPair",
                "Properties": {
                    "KeyName": {
                        "Fn::Join": [
                            "-",
                            [
                                "seafile-installer",
                                {
                                    "Ref": "AWS::StackName"
                                }
                            ]
                        ]
                    }
                }
            },
            "SeafileSecurityGroup": {
                "Type": "AWS::EC2::SecurityGroup",
                "Properties": {
                    "GroupDescription": "The Seafile instance Security Group, allowing ingress TCP traffic at port 22(ssh) and port 80(http).",
                    "GroupName": "SeafileSecurityGroup",
                    "VpcId": {
                        "Ref": "SeafileVPC"
                    },
                    "SecurityGroupIngress": [
                        {
                            "CidrIp": "0.0.0.0/0",
                            "IpProtocol": "tcp",
                            "FromPort": 22,
                            "ToPort": 22
                        },
                        {
                            "CidrIp": "0.0.0.0/0",
                            "IpProtocol": "tcp",
                            "FromPort": 80,
                            "ToPort": 80
                        }
                    ],
                    "SecurityGroupEgress": [
                        {
                            "CidrIp": "0.0.0.0/0",
                            "IpProtocol": -1
                        }
                    ]
                },
                "Metadata": {}
            },
            "SeafileInternetGateway": {
                "Type": "AWS::EC2::InternetGateway",
                "Properties": {},
                "Metadata": {},
                "DependsOn": [
                    "SeafileVPC"
                ]
            },
            "SubnetRouteTableAssociation": {
                "Type": "AWS::EC2::SubnetRouteTableAssociation",
                "Properties": {
                    "RouteTableId": {
                        "Ref": "SeafileRouteTable"
                    },
                    "SubnetId": {
                        "Ref": "SeafileSubnet"
                    }
                },
                "Metadata": {}
            },
            "KeyPairDisplayFunction": {
                "Type": "AWS::Lambda::Function",
                "Properties": {
                    "Handler": "index.handler",
                    "Runtime": "python3.8",
                    "Role": {
                        "Fn::GetAtt": [
                            "GeneralExecutionRole",
                            "Arn"
                        ]
                    },
                    "Code": {
                        "ZipFile": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "import boto3",
                                    "import cfnresponse",
                                    "import string",
                                    "import random",
                                    "import traceback",
                                    "'''",
                                    "This python program should be embedded into its designated cloudformation",
                                    "template as the inline code of one of the lambda functions.",
                                    "to retrieve the private key material for display under the Outputs tab.",
                                    "'''",
                                    "def handler(event, context):",
                                    "   try:",
                                    "       if event['RequestType'] == 'Delete':",
                                    "           cfnresponse.send(event, context, cfnresponse.SUCCESS, {})",
                                    "       elif event['RequestType'] == 'Create':",
                                    "           region = event['ResourceProperties']['Region']",
                                    "           ssm = boto3.client('ssm',region)",
                                    "           response = ssm.get_parameter(",
                                    {
                                        "Fn::Join": [
                                            "",
                                            [
                                                "               Name='/ec2/keypair/",
                                                {
                                                    "Fn::GetAtt": [
                                                        "KeyPair",
                                                        "KeyPairId"
                                                    ]
                                                },
                                                "',"
                                            ]
                                        ]
                                    },
                                    "               WithDecryption=True",
                                    "           )",
                                    "           keyMaterial = response['Parameter']['Value']",
                                    "           cfnresponse.send(event, context, cfnresponse.SUCCESS, {'KeyMaterial':keyMaterial}, 'KeyPairDisplayFunctionInfo')",
                                    "   except Exception as e:",
                                    "       cfnresponse.send(event, context, cfnresponse.FAILED, {'ErrorMsg':traceback.format_exc()})"
                                ]
                            ]
                        }
                    },
                    "Timeout": 30
                },
                "Metadata": {},
                "DependsOn": [
                    "GeneralExecutionRole",
                    "KeyPair"
                ]
            },
            "KeyPairDisplayFunctionInfo": {
                "Type": "Custom::KeyPairDisplayFunctionInfo",
                "Properties": {
                    "Region": {
                        "Ref": "AWS::Region"
                    },
                    "ServiceToken": {
                        "Fn::GetAtt": [
                            "KeyPairDisplayFunction",
                            "Arn"
                        ]
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "KeyPairDisplayFunction",
                    "KeyPair"
                ]
            },
            "AMIInfo": {
                "Type": "Custom::AMIInfo",
                "Properties": {
                    "Region": {
                        "Ref": "AWS::Region"
                    },
                    "ServiceToken": {
                        "Fn::GetAtt": [
                            "AMIInfoFunction",
                            "Arn"
                        ]
                    },
                    "Distribution": {
                        "Ref": "OS"
                    }
                },
                "Metadata": {},
                "DependsOn": [
                    "AMIInfoFunction"
                ]
            },
            "AMIInfoFunction": {
                "Type": "AWS::Lambda::Function",
                "Properties": {
                    "Handler": "index.handler",
                    "Runtime": "python3.8",
                    "Role": {
                        "Fn::GetAtt": [
                            "GeneralExecutionRole",
                            "Arn"
                        ]
                    },
                    "Code": {
                        "ZipFile": {
                            "Fn::Join": [
                                "\n",
                                [
                                    "import boto3",
                                    "import cfnresponse",
                                    "import traceback",
                                    "'''",
                                    "This python script should be embeded into its designated cloudformation template.",
                                    "Its function is to sort out the correct AMI image to use for each of the distribution options available.",
                                    "'''",
                                    "def creation_date(e):",
                                    "   return e['CreationDate']",
                                    "",
                                    "def handler(event, context):",
                                    "   try:",
                                    "       regionName = event['ResourceProperties']['Region']",
                                    "       distribution = event['ResourceProperties']['Distribution']",
                                    "       ec2 = boto3.client('ec2',regionName)",
                                    "       AMIName = {",
                                    "           'Ubuntu2004': 'ubuntu/images/hvm-ssd/ubuntu-focal-20.04-amd64-server-*'",
                                    "       }[distribution]",
                                    "       response = ec2.describe_images(Filters=[{'Name':'name', 'Values':[AMIName]}], Owners=['099720109477'])",
                                    "       images = response['Images']",
                                    "       images.sort(key=creation_date,reverse=True)",
                                    "       AMIId = images[0]['ImageId']",
                                    "       cfnresponse.send(event, context, cfnresponse.SUCCESS, {'AMIId':AMIId}, 'AMIInfo')",
                                    "   except Exception:",
                                    "       cfnresponse.send(event, context, cfnresponse.FAILED, {'ErrorMsg':traceback.format_exc()})"
                                ]
                            ]
                        }
                    },
                    "Timeout": 30
                },
                "Metadata": {},
                "DependsOn": [
                    "GeneralExecutionRole"
                ]
            },
            "GeneralExecutionRole": {
                "Type": "AWS::IAM::Role",
                "Properties": {
                    "AssumeRolePolicyDocument": {
                        "Version": "2012-10-17",
                        "Statement": [
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "lambda.amazonaws.com"
                                },
                                "Action": [
                                    "sts:AssumeRole"
                                ]
                            },
                            {
                                "Effect": "Allow",
                                "Principal": {
                                    "Service": "ec2.amazonaws.com"
                                },
                                "Action": [
                                    "sts:AssumeRole"
                                ]
                            }

                        ]
                    },
                    "Path": "/",
                    "Policies": [
                        {
                            "PolicyName": "root",
                            "PolicyDocument": {
                                "Version": "2012-10-17",
                                "Statement": [
                                    {
                                        "Effect": "Allow",
                                        "Action": "*",
                                        "Resource": "*"
                                    }
                                ]
                            }
                        }
                    ]
                },
                "Metadata": {}
            },
            "InternetGatewayAttachment": {
                "Type": "AWS::EC2::VPCGatewayAttachment",
                "Properties": {
                    "InternetGatewayId": {
                        "Ref": "SeafileInternetGateway"
                    },
                    "VpcId": {
                        "Ref": "SeafileVPC"
                    }
                },
                "Metadata": {}
            }
        },
        "Parameters": {
            "OS": {
                "Type": "String",
                "Description": "The OS of your Seafile server. Default: Ubuntu 18.04",
                "Default": "Ubuntu2004",
                "AllowedValues": [
                    "Ubuntu2004"                
                ]
            },
            "InstanceType": {
                "Type": "String",
                "Description": "The instance type of your Seafile server. Using t2.micro or t3.micro may qualify for the AWS Free Tier.",
                "AllowedValues": [
                    "t2.micro",
                    "t3.nano",
                    "m5.large",
                    "t3.micro",
                    "t3.small",
                    "t2.nano",
                    "t2.small",
                    "t3a.nano",
                    "t3a.micro",
                    "t3a.small",
                    "m5a.large",
                    "t1.micro"
                ],
                "Default": "t2.micro"
            },
            "SeafileAdminPassword":{
                "Type": "String",
                "Description": "Your seafile admin password.",
                "MinLength": 8,
                "MaxLength": 30
            },
            "SeafileVersion":{
                "Type": "String",
                "Description": "The version of the Seafile server release used. Default: 10.0",
                "Default": "10.0",
                "AllowedValues":[
                    "8.0",
                    "9.0",
                    "10.0"
                ]
            }
        },
        "Outputs": {
            "ServerAddress": {
                "Description": "This is the URL of your newly-launched Seafile server.",
                "Value": {
                    "Fn::Join":[
                        "",
                        [
                            "http://",
                            {
                                "Fn::GetAtt": [
                                    "SeafileInstance",
                                    "PublicIp"
                                ]            
                            }
                        ]
                    ]
                }
            },
            "EC2PrivateKeyId": {
                "Description": "The ID of the key pair created. For more information regarding how to retrieve the private key for authentication, please refer to: https://github.com/haiwen/seafile-server-installer/blob/master/aws/README.md#faqs",
                "Value": {
                    "Fn::GetAtt": [
                        "KeyPair",
                        "KeyPairId"
                    ]
                }
            },
            "EC2PrivateKeyMaterial": {
                "Description": "The content of your private key for accessing the Seafile server via SSH. Save it as a file for use when connecting.",
                "Value": {
                    "Fn::GetAtt": [
                        "KeyPairDisplayFunctionInfo",
                        "KeyMaterial"
                    ]
                }
            }
        }
    }
