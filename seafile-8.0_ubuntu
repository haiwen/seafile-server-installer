#!/bin/bash
#
# seafile-server-installer/seafile-ubuntu-8.0_ubuntu
#
# Copyright 2015, Alexander Jackson <alexander.jackson@seafile.de>
# Copyright 2016, Zheng Xie <xie.zheng@seafile.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU Affero General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU Affero General Public License for more details.
#
# You should have received a copy of the GNU Affero General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#
#

date_str=`date +%Y%m%d_%H%M%S`

if [[ $HOME == "" ]]; then
    export HOME=/root
fi

# -------------------------------------------
# Pre-check
# -------------------------------------------
if [[ $EUID -ne 0 ]]; then
  echo "  Aborting because you are not root" ; exit 1
fi

if [[ "$#" -ne 1 ]]; then
    echo "You must specif Seafile version to install"
    echo "Like: $0 8.0.0"
    exit 1
fi

# -------------------------------------------
# User-defined params
# -------------------------------------------
clear
cat <<EOF

  This script installs the community edition of the Seafile Server on a Ubuntu 16.04 (Xenial) / 18.04 (Bionic) / 20.04 (Focal) 64bit
  - Newest Seafile server version, MariaDB, Memcached, NGINX -
  -----------------------------------------------------------------

  This installer is meant to run on a freshly installed machine
  only. If you run it on a production server things can and
  probably will go terribly wrong and you will lose valuable
  data!

  For questions or suggestions please contact us at
  support@seafile.com

  -----------------------------------------------------------------

  Possible options:
  1 = Seafile Community (Free) Edition (CE)
  2 = Seafile Professional Edition (PRO)

EOF

if [[ ${SEAFILE_PRO} == "" ]]; then
    PS3="Which Seafile version would you like to install? "
    select SEAFILE_SERVER_VERSION in CE PRO ABORT; do
        case "${SEAFILE_SERVER_VERSION}" in
            ABORT)
                echo "Aborting"
                break
                ;;
            "")
                echo "$REPLY: Wrong value. Select 1 or 2."
                ;;
            *)
                if [[ ${SEAFILE_SERVER_VERSION} = "PRO" ]]; then
                    SEAFILE_PRO=1
                else
                    SEAFILE_PRO=0
                fi
                break
        esac
    done
fi

is_pro() {
    if [[ "$SEAFILE_PRO" == "1" ]]; then
        return 0
    else
        return 1
    fi
}

apt-get install -y -q pwgen &>> /dev/null

SEAFILE_SERVER_USER=seafile
if getent passwd ${SEAFILE_SERVER_USER} > /dev/null 2>&1 ;
then
  echo "Aborting because user ${SEAFILE_SERVER_USER} already exist" ; exit 1
fi

SEAFILE_SERVER_HOME=/opt/seafile
if [[ -d "${SEAFILE_SERVER_HOME}" ]] ;
then
  echo "  Aborting because directory ${SEAFILE_SERVER_HOME} already exist" ; exit 1
fi

SEAFILE_VERSION=$1
if is_pro; then
    SEAFILE_SERVER_PACKAGE=seafile-pro-server_${SEAFILE_VERSION}_x86-64.tar.gz
    if [[ ! -e /opt/$SEAFILE_SERVER_PACKAGE ]]; then
        echo
        echo "You must download \"$SEAFILE_SERVER_PACKAGE\" to the /opt/ folder before running this script! You can get Pro version by registering an account in https://customer.seafile.com/"
        echo
        exit 1
    fi
    INSTALLPATH=${SEAFILE_SERVER_HOME}/seafile-pro-server-${SEAFILE_VERSION}/
else
    SEAFILE_SERVER_PACKAGE=seafile-server_${SEAFILE_VERSION}_x86-64.tar.gz
    SEAFILE_SERVER_PACKAGE_URL=https://download.seadrive.org/${SEAFILE_SERVER_PACKAGE}
    INSTALLPATH=${SEAFILE_SERVER_HOME}/seafile-server-${SEAFILE_VERSION}/
fi

IP_OR_DOMAIN=127.0.0.1
# By this address you'll get web-page and other resources
printf "\nInput IP or DOMAIN NAME of your server (default: $IP_OR_DOMAIN): "; read chose
if [[ "$chose" != '' ]]; then
  IP_OR_DOMAIN="$chose"; chose=""
fi

SEAFILE_ADMIN=admin@seafile.local
echo -e "\nInput seafile admin account:"
printf "\t name (default: $SEAFILE_ADMIN): "; read chose
if [[ "$chose" != '' ]]; then
  SEAFILE_ADMIN="$chose"; chose=""
fi
[[ "$SEAFILE_ADMIN" =~ ^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\.[a-zA-Z]{2,10}$ ]] || echo "no"


printf "\t password (auto generate by default): "; read chose
if [[ "$chose" != '' ]]; then
  SEAFILE_ADMIN_PW="$chose"; chose=""
else
  SEAFILE_ADMIN_PW=$(pwgen)
fi

echo -e "\nDB settigns:"
printf "\t DB user 'root' password (auto generate by default): "; read chose
if [[ "$chose" != '' ]]; then
  SQLROOTPW="$chose"; chose=""
else
  SQLROOTPW=$(pwgen)
fi
printf "\t DB user 'seafile' password (auto generate by default): "; read chose
if [[ "$chose" != '' ]]; then
  SQLSEAFILEPW="$chose"; chose=""
else
  SQLSEAFILEPW=$(pwgen)
fi

#TIME_ZONE=Europe/Berlin
TIME_ZONE=`cat /etc/timezone`
echo -e "\nList of avaliable time zones you can find: https://en.wikipedia.org/wiki/List_of_tz_database_time_zones"
printf "Input time zone (default: $TIME_ZONE): "; read chose
if [[ "$chose" != '' ]]; then
  TIME_ZONE="$chose"; chose=""
fi

echo
# -------------------------------------------
# Exit on errors and trace settings
# -------------------------------------------
# it's hard to find out bad code line without trace. By default trace is on
if [[ $SEAFILE_DEBUG_OFF = "" ]]; then
    set -x
fi
set -e


# -------------------------------------------
# Seafile: download and extracting
# -------------------------------------------
mkdir -p ${SEAFILE_SERVER_HOME}/installed
cd ${SEAFILE_SERVER_HOME}
if ! is_pro && [[ ! -e /opt/${SEAFILE_SERVER_PACKAGE} ]]; then
    curl -OL ${SEAFILE_SERVER_PACKAGE_URL}
else
    cp /opt/${SEAFILE_SERVER_PACKAGE} .
fi
tar xzf ${SEAFILE_SERVER_PACKAGE}

mv ${SEAFILE_SERVER_PACKAGE} installed


# -------------------------------------------
# Additional requirements
# -------------------------------------------
apt-get update

apt-get install -y python3 python3-setuptools python3-pip python3-ldap memcached openjdk-8-jre \
    libmemcached-dev libreoffice-script-provider-python libreoffice curl nginx libmysqlclient-dev

pip3 install --timeout=3600 django==2.2.* future mysqlclient pymysql Pillow pylibmc captcha jinja2 sqlalchemy==1.4.3 \
    psd-tools django-pylibmc django-simple-captcha

service memcached start


# -------------------------------------------
# Setup Nginx
# -------------------------------------------

cp -Rf /etc/nginx/sites-enabled /etc/nginx/sites-enabled.bak${date_str}_seafile
rm -Rf /etc/nginx/sites-enabled/*
if [ -d /etc/nginx/conf.d ]; then
  cp -Rf /etc/nginx/conf.d /etc/nginx/conf.d.bak${date_str}_seafile
  rm -Rf /etc/nginx/conf.d/*
fi

cat > /etc/nginx/sites-available/seafile.conf << EOF
log_format seafileformat '\$http_x_forwarded_for \$remote_addr [\$time_local] "\$request" \$status \$body_bytes_sent "\$http_referer" "\$http_user_agent" \$upstream_response_time';

server {
    listen 80;
    server_name seafile.example.com;

    proxy_set_header X-Forwarded-For \$remote_addr;

    location / {
         proxy_pass         http://127.0.0.1:8000;
         proxy_set_header   Host \$host;
         proxy_set_header   X-Real-IP \$remote_addr;
         proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
         proxy_set_header   X-Forwarded-Host \$server_name;
         proxy_set_header   X-Forwarded-Proto \$scheme;
         proxy_read_timeout  1200s;

         # used for view/edit office file via Office Online Server
         client_max_body_size 0;

         access_log      /var/log/nginx/seahub.access.log seafileformat;
         error_log       /var/log/nginx/seahub.error.log;
    }
    
    location /seafhttp {
         rewrite ^/seafhttp(.*)$ \$1 break;
         proxy_pass http://127.0.0.1:8082;
         client_max_body_size 0;
         proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
         proxy_connect_timeout  36000s;
         proxy_read_timeout  36000s;

        access_log      /var/log/nginx/seafhttp.access.log seafileformat;
        error_log       /var/log/nginx/seafhttp.error.log;
    }
    location /media {
        root ${SEAFILE_SERVER_HOME}/seafile-server-latest/seahub;
    }
    location /seafdav {
        proxy_pass         http://127.0.0.1:8080/seafdav;
        proxy_set_header   Host \$host;
        proxy_set_header   X-Real-IP \$remote_addr;
        proxy_set_header   X-Forwarded-For \$proxy_add_x_forwarded_for;
        proxy_set_header   X-Forwarded-Host \$server_name;
        proxy_set_header   X-Forwarded-Proto \$scheme;
        proxy_read_timeout  1200s;

        client_max_body_size 0;

        access_log      /var/log/nginx/seafdav.access.log seafileformat;
        error_log       /var/log/nginx/seafdav.error.log;
    }
}
EOF

ln -sf /etc/nginx/sites-available/seafile.conf /etc/nginx/sites-enabled/seafile.conf

service nginx restart


# -------------------------------------------
# Install MariaDB
# -------------------------------------------
DEBIAN_FRONTEND=noninteractive apt-get install -y mariadb-server
service mysql start
mysqladmin -u root password $SQLROOTPW


# -------------------------------------------
# Add seafile user
# -------------------------------------------
useradd --system --comment "${SEAFILE_SERVER_USER}" ${SEAFILE_SERVER_USER} --home-dir  ${SEAFILE_SERVER_HOME}


# -------------------------------------------
# systemd services for seafile & seahub
# -------------------------------------------
cat > /etc/systemd/system/seafile.service << EOF
[Unit]
Description=Seafile, cloud storage system
After=network.target
After=mysql.service
Requires=mysql.service

[Service]
Type=forking
PIDFile=${SEAFILE_SERVER_HOME}/pids/seaf-server.pid
WorkingDirectory=${SEAFILE_SERVER_HOME}

User=${SEAFILE_SERVER_USER}
Group=${SEAFILE_SERVER_USER}

ExecStart=${SEAFILE_SERVER_HOME}/seafile-server-latest/seafile.sh start
ExecStop=${SEAFILE_SERVER_HOME}/seafile-server-latest/seafile.sh stop
ExecReload=${SEAFILE_SERVER_HOME}/seafile-server-latest/seafile.sh restart

Restart=on-failure
RestartSec=5
SuccessExitStatus=SIGKILL

[Install]
WantedBy=multi-user.target
EOF

cat > /etc/systemd/system/seahub.service << EOF
[Unit]
Description=Seahub, web frontend for Seafile
After=seafile.service
Requires=seafile.service

[Service]
Type=forking
PIDFile=${SEAFILE_SERVER_HOME}/pids/seahub.pid
WorkingDirectory=${SEAFILE_SERVER_HOME}

User=${SEAFILE_SERVER_USER}
Group=${SEAFILE_SERVER_USER}

ExecStart=${SEAFILE_SERVER_HOME}/seafile-server-latest/seahub.sh start
ExecStop=${SEAFILE_SERVER_HOME}/seafile-server-latest/seahub.sh stop
ExecReload=${SEAFILE_SERVER_HOME}/seafile-server-latest/seahub.sh restart

Restart=on-failure
RestartSec=5
SuccessExitStatus=SIGKILL

[Install]
WantedBy=multi-user.target
EOF

# load new service
systemctl daemon-reload

# Autostart
systemctl enable seafile
systemctl enable seahub


# -------------------------------------------
# Go to /opt/seafile/seafile-pro-server-${SEAFILE_VERSION}
# -------------------------------------------
cd $INSTALLPATH

# -------------------------------------------
# Vars - Don't touch these unless you really know what you are doing!
# -------------------------------------------
TOPDIR=$(dirname "${INSTALLPATH}")
DEFAULT_CONF_DIR=${TOPDIR}/conf
SEAFILE_DATA_DIR=${TOPDIR}/seafile-data
DEST_SETTINGS_PY=${TOPDIR}/conf/seahub_settings.py

mkdir -p ${DEFAULT_CONF_DIR}

# -------------------------------------------
# Create ccnet, seafile, seahub conf using setup script
# -------------------------------------------

./setup-seafile-mysql.sh auto -u seafile -w ${SQLSEAFILEPW} -r ${SQLROOTPW}

# -------------------------------------------
# Configure Seafile WebDAV Server(SeafDAV)
# -------------------------------------------
sed -i 's/enabled = .*/enabled = true/' ${DEFAULT_CONF_DIR}/seafdav.conf
sed -i 's/fastcgi = .*/fastcgi = true/' ${DEFAULT_CONF_DIR}/seafdav.conf
sed -i 's/share_name = .*/share_name = \/seafdav/' ${DEFAULT_CONF_DIR}/seafdav.conf

# -------------------------------------------
# Configuring seahub_settings.py
# -------------------------------------------
cat >> ${DEST_SETTINGS_PY} <<EOF

CACHES = {
    'default': {
        'BACKEND': 'django_pylibmc.memcached.PyLibMCCache',
        'LOCATION': '127.0.0.1:11211',
    },
    'locmem': {
        'BACKEND': 'django.core.cache.backends.locmem.LocMemCache',
    },
}
COMPRESS_CACHE_BACKEND = 'locmem'

# EMAIL_USE_TLS                       = False
# EMAIL_HOST                          = 'localhost'
# EMAIL_HOST_USER                     = ''
# EMAIL_HOST_PASSWORD                 = ''
# EMAIL_PORT                          = '25'
# DEFAULT_FROM_EMAIL                  = EMAIL_HOST_USER
# SERVER_EMAIL                        = EMAIL_HOST_USER

TIME_ZONE                           = '${TIME_ZONE}'
SITE_BASE                           = 'http://${IP_OR_DOMAIN}'
SITE_NAME                           = 'Seafile Server'
SITE_TITLE                          = 'Seafile Server'
SITE_ROOT                           = '/'
ENABLE_SIGNUP                       = False
ACTIVATE_AFTER_REGISTRATION         = False
SEND_EMAIL_ON_ADDING_SYSTEM_MEMBER  = True
SEND_EMAIL_ON_RESETTING_USER_PASSWD = True
CLOUD_MODE                          = False
FILE_PREVIEW_MAX_SIZE               = 30 * 1024 * 1024
SESSION_COOKIE_AGE                  = 60 * 60 * 24 * 7 * 2
SESSION_SAVE_EVERY_REQUEST          = False
SESSION_EXPIRE_AT_BROWSER_CLOSE     = False

FILE_SERVER_ROOT                    = 'http://${IP_OR_DOMAIN}/seafhttp'
EOF


# -------------------------------------------
#
# -------------------------------------------
# Backup check_init_admin.py before applying changes
cp ${INSTALLPATH}/check_init_admin.py ${INSTALLPATH}/check_init_admin.py.backup

# Set admin credentials in check_init_admin.py
eval "sed -i 's/= ask_admin_email()/= \"${SEAFILE_ADMIN}\"/' ${INSTALLPATH}/check_init_admin.py"
eval "sed -i 's/= ask_admin_password()/= \"${SEAFILE_ADMIN_PW}\"/' ${INSTALLPATH}/check_init_admin.py"

# Start and stop Seafile eco system. This generates the initial admin user.
chown ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} -R ${SEAFILE_SERVER_HOME}
service seahub start  # it starts seafile.service also
# if there is some problems. Try: sudo ${SEAFILE_SERVER_HOME}/seafile-server-latest/seahub.sh start-fastcgi
service seafile stop  # it stops seahub.service also

# Restore original check_init_admin.py
mv ${INSTALLPATH}/check_init_admin.py.backup ${INSTALLPATH}/check_init_admin.py

if is_pro; then
    PRO_PY=${INSTALLPATH}/pro/pro.py
    $PYTHON ${PRO_PY} setup --mysql --mysql_host=127.0.0.1 --mysql_port=3306 --mysql_user=seafile --mysql_password=${SQLSEAFILEPW} --mysql_db=seahub_db
fi

service seafile stop  # it stops seahub.service also


# -------------------------------------------
# Fix permissions
# -------------------------------------------
chown ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} -R ${SEAFILE_SERVER_HOME}
if [[ -d /tmp/seafile-office-output/ ]]; then
    chown ${SEAFILE_SERVER_USER}:${SEAFILE_SERVER_USER} -R /tmp/seafile-office-output/
fi

# -------------------------------------------
# Start seafile server
# -------------------------------------------
echo "Starting productive Seafile server"
service seahub start  # it starts seafile.service also


# -------------------------------------------
# Final report
# -------------------------------------------
cat > ${TOPDIR}/aio_seafile-server.log<<EOF

  Your Seafile server is installed
  -----------------------------------------------------------------

  Server Address:      http://${IP_OR_DOMAIN}

  Seafile Admin (for login in web)
    Name:     ${SEAFILE_ADMIN}
    Password: ${SEAFILE_ADMIN_PW}

  Seafile Data Dir: ${SEAFILE_DATA_DIR}
  
  RDBMS user's passwords:
    root:     ${SQLROOTPW}
    seafile:  ${SQLSEAFILEPW}
  
  TIME_ZONE:  ${TIME_ZONE}
  

  This report is also saved to ${TOPDIR}/aio_seafile-server.log



  Next you should manually complete the following steps
  -----------------------------------------------------------------

  1) Log in to Seafile and configure your server domain via the system
     admin area if applicable.

  2) If this server is behind a firewall, you need to ensure that
     tcp port 80 is open.

  3) Seahub tries to send emails via the local server. Install and
     configure Postfix for this to work or
     check https://manual.seafile.com/config/sending_email.html
     for instructions on how to use an existing email account via SMTP.




  Optional steps
  -----------------------------------------------------------------

  1) Check ${DEFAULT_CONF_DIR}/seahub_settings.py and customize it to fit your needs. Consult
     https://github.com/haiwen/seafile-docs/blob/master/config/seahub_settings_py.md for possible switches.

  2) Setup NGINX with official SSL certificate, we suggest you use Let’s Encrypt. Check
     https://github.com/haiwen/seafile-docs/blob/master/deploy/https_with_nginx.md

  3) Secure server with iptables based firewall. For instance: UFW or shorewall

  4) Harden system with port knocking, fail2ban, etc.

  5) Enable unattended installation of security updates. Check
     https://wiki.Ubuntu.org/UnattendedUpgrades for details.

  6) Implement a backup routine for your Seafile server.

  7) Update NGINX worker processes to reflect the number of CPU cores.




  Seafile support options
  -----------------------------------------------------------------

  For free community support visit:   https://forum.seafile.com
  For paid commercial support visit:  https://seafile.com

EOF

chmod 600 ${TOPDIR}/aio_seafile-server.log

clear

cat ${TOPDIR}/aio_seafile-server.log
